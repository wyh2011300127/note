<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
    	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
    	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
	<!-- 组件扫描 -->
	<context:component-scan base-package="com.yuheng.wang">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller"></context:exclude-filter>
	</context:component-scan>

	<!-- 读取jdbc配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:jdbc.properties"></property>
	</bean>

	<!-- 配置数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${driverClassName}"></property>
		<property name="jdbcUrl" value="${url}"></property>
		<property name="user" value="${username}"></property>
		<property name="password" value="${password}"></property>
		<property name="maxPoolSize" value="260"></property>
		<property name="minPoolSize" value="10"></property>
		<property name="maxIdleTime" value="120"></property>
	</bean>

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:com/yuheng/wang/mapping/*.xml"></property>
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.yuheng.wang.dao"></property>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

	<!-- (事务管理)transaction manager -->
	<bean name="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 配置需要加入事务的规则 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="delete*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" no-rollback-for="java.lang.RuntimeException"></tx:method>
			<tx:method name="insert*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.RuntimeException"></tx:method>
			<tx:method name="add*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.RuntimeException"></tx:method>
			<tx:method name="create*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.RuntimeException"></tx:method>
			<tx:method name="update*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception"></tx:method>

			<tx:method name="find*" propagation="SUPPORTS"></tx:method>
			<tx:method name="get*" propagation="SUPPORTS"></tx:method>
			<tx:method name="select*" propagation="SUPPORTS"></tx:method>
			<tx:method name="query*" propagation="SUPPORTS"></tx:method>
		</tx:attributes>
	</tx:advice>

	<!-- 开启注解方式aspectj切面支持 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- Spring的声明式事务管理，把事务控制在service层 -->
	<aop:config>
		<!-- 切入点 -->
		<aop:pointcut id="servicePointCut"
			expression="execution(* com.yuheng.wang.service..*.*(..))"></aop:pointcut>
		<!-- aop:advisor标签就是把上面我们所配置的事务管理两部分属性整合起来作为整个事务管理 -->
		<aop:advisor pointcut-ref="servicePointCut" advice-ref="txAdvice"></aop:advisor>
	</aop:config>

	<aop:config>
		<!-- 切入点 -->
		<aop:pointcut id="helloPointCut"
			expression="execution(* com.yuheng.wang.common.util.StringUtil.*(..))"></aop:pointcut>
		<!-- 自定义一个切面 -->
		<aop:aspect id="helloAspect" ref="helloIntercetor">
			<aop:before method="doBefore" pointcut-ref="helloPointCut"></aop:before>
			<aop:after method="doAfter" pointcut-ref="helloPointCut"></aop:after>
			<aop:around method="doAround" pointcut-ref="helloPointCut"></aop:around>
			<aop:after-returning method="doReturn"
				pointcut-ref="helloPointCut"></aop:after-returning>
			<aop:after-throwing method="doThrowing" throwing="ex"
				pointcut-ref="helloPointCut"></aop:after-throwing>
		</aop:aspect>
	</aop:config>

	<bean id="helloIntercetor" class="com.yuheng.wang.interceptors.HelloInterceptor"></bean>

</beans>
